name: Deploy Challenges to Production

on:
  push:
    branches:
      - main
    paths:
      - 'challenges/**'
  workflow_dispatch: {}

concurrency:
  group: pset-update-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-pset:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Clone AlphaGPU/leetgpu-pset
        shell: bash
        env:
          PSET_TOKEN: ${{ secrets.PSET_TOKEN }}
        run: |
          set -euo pipefail
          if [[ -z "${PSET_TOKEN:-}" ]]; then
            echo "Missing secret PSET_TOKEN with write access to AlphaGPU/leetgpu-pset" >&2
            exit 1
          fi
          git clone --recursive "https://x-access-token:${PSET_TOKEN}@github.com/AlphaGPU/leetgpu-pset.git"
          cd leetgpu-pset
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Write .env for pset
        working-directory: leetgpu-pset
        env:
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        shell: bash
        run: |
          set -euo pipefail
          cat > .env << EOF
          SUPABASE_PROJECT_ID=${SUPABASE_PROJECT_ID}
          SUPABASE_DB_PASSWORD=${SUPABASE_DB_PASSWORD}
          EOF

      - name: Run pset update to bump submodule
        working-directory: leetgpu-pset
        shell: bash
        run: |
          set -euo pipefail
          chmod +x ./scripts/update
          ./scripts/update

      - name: Install Python deps for pset
        working-directory: leetgpu-pset
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run update_challenges for all challenges
        working-directory: leetgpu-pset
        shell: bash
        run: |
          set -euo pipefail
          python scripts/update_challenge.py

      - name: Clear Redis cache on production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            set -e
            
            echo "Clearing Redis cache for challenges..."
            
            # Clear the all_challenges cache key
            docker exec fastapi-container redis-cli DEL all_challenges || {
              echo "Failed to clear cache. Container might not exist or Redis might not be running."
              exit 1
            }
            
            echo "Successfully cleared all_challenges cache!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: update-pset
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.update-pset.result == 'success'
      run: |
        echo "Challenge deployment completed successfully!"
        
    - name: Notify Failure
      if: needs.update-pset.result == 'failure'
      run: |
        echo "Challenge deployment failed!"
        exit 1
